使い方

(1) Julius を実行して, 'result.txt' に結果を保存する
julius_mft -C julius.conf 2>&1 | tee result.txt

(2) HARK を実行
./recog.n 3sp_multi.wav loc_tf sep_tf

(3) 結果を確かめる
./score.py result.txt transcription_list1.txt 60 10
./score.py result.txt transcription_list2.txt -60 10
./score.py result.txt transcription_list3.txt 0 10

(4) 分離音を確認する
 a) raw ファイルを wav ファイルに変換
./sw2wav.py . wav/ | sh
 
 b) 音を再生
play wav/NR0.wav

File の説明
3sp_multi.wav: 8チャンネル 3話者混合音声信号
allTriphones: Julius 用音響モデルのひとつ
hmmdefs.gz: Julius 用音響モデルのひとつ
julius.conf: Julius 設定ファイル
 -input mfcnet に設定されている
 -module は指定されていない
loc_tf: localizeMUSIC (定位) 用の伝達関数. harktool3 を用いて作成.
order.*: Julius 用言語モデル
sep_tf: GHDSS (分離) 用の伝達関数. harktool3 を用いて作成
transcription_list{1-3}.txt: 3sp_multi.wav に収録された3話者発話の正解データ. それぞれ 60, -60, 0 度方向の発話に対応.

Script の説明
recog.n: Flowdesigner で作成したネットワークファイル
 使い方:  ./recog.n AUDIO_FILE TF_LOCALIZATION(A_MATRIX) TF_SEPARATION(TF_CONJ)
 各種パラメータは以下の通り
  NUM_SOURCES(LocalizeMUSIC): 3
  THRESH(SourceTracker): 29.5
  GHDSS: Adaptive, Full, Adaptive
  LX(HRLE): 0.5
  WN_LEVEL(WhiteNoiseAdder): 300
 
score.py: 評価用スクリプト
 使い方: ./score.py JULIUS_RESULT TRANSCRIPTION SRC_DIRECTION DIRECTION_MARGIN
  音声認識率を計算: 幅 DIRECTION_MARGIN を持って SRC_DIRECTION 方向からの発話を対象に計算.

sw2wav.py: sw ファイルを wav ファイルに変換するためのスクリプト
 使い方: ./sw2wav.py SRC_DIR OUT_DIR | sh
  SRC_DIR ディレクトリに入っている .sw ファイルを全て wave 形式にし, OUT_DIR に保存.
  変換し終わった .sw ファイルは自動的に消去される.
  もし, .sw ファイルを残しておきたい場合, 次のように引数を追加して実行する  './sw2wav.py SRC_DIR OUT_DIR 0 | sh'.
  3番目の引数の値に意味はなく, 追加することで .sw ファイルが残るようになる.
  このスクリプトは sox を利用する変換コマンドを利用するので, 
  sh や bash にパイプして実行する必要がある: '| sh'



How to run?

(1) run Julius and save results to 'result.txt'
julius_mft -C julius.conf 2>&1 | tee result.txt

(2) run HARK
./recog.n 3sp_multi.wav loc_tf sep_tf

(3) verify the results
./score.py result.txt transcription_list1.txt 60 10
./score.py result.txt transcription_list2.txt -60 10
./score.py result.txt transcription_list3.txt 0 10

(4) check separated audio signals
 a) convert raw into wav format
./sw2wav.py . wav/ | sh

 b) play the sound
e.g., play wav/NR0.wav 

Files
3sp_multi.wav: 8-ch audio signal with 3 speakers
allTriphones: for julius
hmmdefs.gz: an acoustic model for julius
julius.conf: a configuration file for julius
 -input mfcnet is specified
 -module is not specified
loc_tf: a transfer function file generated by harktool3 for localizeMUSIC
order.*: a language model for julius
sep_tf: a transfer function file generated by harktool3 for GHDSS
transcription_list{1-3}.txt: transcription files for the speakers in 3sp_multi.wav from 60, -60, 0 degree(s), respectively


Scripts
recog.n: main network
 usage:  ./recog.n AUDIO_FILE TF_LOCALIZATION(A_MATRIX) TF_SEPARATION(TF_CONJ)
 important parameters are configured as follows
  NUM_SOURCES(LocalizeMUSIC): 3
  THRESH(SourceTracker): 29.5
  GHDSS: Adaptive, Full, Adaptive
  LX(HRLE): 0.5
  WN_LEVEL(WhiteNoiseAdder): 300
 
score.py: an evaluation script
 usage: ./score.py JULIUS_RESULT TRANSCRIPTION SRC_DIRECTION DIRECTION_MARGIN
  calculate the word recognition rate for utterances from SRC_DIRECTION with the margin DIRECTION_MARGIN (degree).

sw2wav.py: sw to wav file conversion script
 usage: ./sw2wav.py SRC_DIR OUT_DIR | sh
  convert all .sw files in SRC_DIR into wave-format files at OUT_DIR.
  All .sw files are removed.
  If you want to leave .sw files unremoved, add another argument like './sw2wav.py SRC_DIR OUT_DIR 0 | sh'.
  The value of third argument is ignored.
  Note that this script just prints conversion commands using sox, therefore, 
  you should pipe to sh or bash like '| sh'
